
Few functions related to Array Creation & Initialization (15 Functions)

1. np.array() - Create an array from a list, tuple, or another array

Syntax:
np.array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0)

Arguments:
object: Input data (list, tuple, or another array).
dtype: Data type (optional, e.g., np.int32).
copy: Whether to copy (True) or reference (False) the object.
order: Memory layout ('C' for row-major, 'F' for column-major).
subok: Allows creation of subclasses (False by default).
ndmin: Minimum number of dimensions.

Example:
import numpy as np
arr = np.array([1, 2, 3], dtype=np.float64)

Code:



2. np.zeros() - Create an array filled with zeros

Syntax:
np.zeros(shape, dtype=float, order='C')

Arguments:
shape: Tuple specifying dimensions (e.g., (3,4) for a 3×4 matrix).
dtype: Data type (float by default).
order: Memory order ('C' for row-major, 'F' for column-major).

Example:
zeros_array = np.zeros((2, 3), dtype=int)

Code:


3. np.ones() - Create an array filled with ones

Syntax:
np.ones(shape, dtype=float, order='C')

Arguments: (Same as np.zeros())
shape
dtype
order

Example:
ones_array = np.ones((3, 3), dtype=np.float32)

Code:


4. np.full() - Create an array filled with a specific value

Syntax:
np.full(shape, fill_value, dtype=None, order='C')

Arguments:
shape: Dimensions of the array.
fill_value: Value to fill the array with.
dtype: Optional data type.
order: Memory layout.

Example:
full_array = np.full((2, 2), 7)

Code:


5. np.empty() - Create an uninitialized array
Syntax:
np.empty(shape, dtype=float, order='C')

Example:
empty_array = np.empty((3, 3))
Note: Values in the array are uninitialized (random memory values).

6. np.arange() - Create an array with a range of values

Syntax:
np.arange(start, stop, step=1, dtype=None)

Arguments:
start: Start of the interval.
stop: End of the interval (exclusive).
step: Spacing between values (default is 1).
dtype: Optional data type.

Example:
range_array = np.arange(0, 10, 2)


7. np.linspace() - Create evenly spaced values

Syntax:
np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)

Arguments:
start, stop: Range of values.
num: Number of values (default 50).
endpoint: Include stop value (True by default).
retstep: Return the spacing between values.
dtype: Data type.

Example:
linear_space = np.linspace(0, 1, 5)


8. np.logspace() - Create logarithmically spaced values
Syntax:
np.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None)

Arguments: (Similar to np.linspace(), but values are logarithmic.)
start, stop, num, endpoint, dtype
base: Logarithmic base (default is 10).

Example:
log_space = np.logspace(1, 3, num=5, base=10)


9. np.meshgrid() - Create coordinate matrices from coordinate vectors

Syntax:
np.meshgrid(*xi, indexing='xy')

Arguments:
*xi: One or more coordinate vectors.
indexing: 'xy' for Cartesian indexing, 'ij' for matrix indexing

Example:
x = np.array([1, 2, 3])
y = np.array([4, 5])
X, Y = np.meshgrid(x, y)


10. np.eye() - Create an identity matrix
Syntax:
np.eye(N, M=None, k=0, dtype=float, order='C')

Arguments:
N, M: Rows and columns (M defaults to N).
k: Diagonal shift (default 0).
dtype, order.

Example:
identity_matrix = np.eye(3)

11. np.identity() - Create an identity matrix (simplified eye())
Syntax:
np.identity(n, dtype=None)

Argument	Description
n	Number of rows and columns (square matrix of size n × n).
dtype	Data type of the output array (default: float).

Example:
identity = np.identity(4)


12. np.diag() - Create a diagonal matrix
Syntax:
np.diag(v, k=0)

Arguments:
v: 1D array (to form diagonal) or 2D matrix.
k: Diagonal shift.

Example:
diag_matrix = np.diag([1, 2, 3])


13. np.tri() - Create a lower triangular matrix

Syntax:
np.tri(N, M=None, k=0, dtype=float)

N	Number of rows in the matrix.
M	Number of columns (default: N, creating a square matrix).
k	Diagonal shift:
  - k=0 → main diagonal
  - k>0 → superdiagonal (above the main diagonal)
  - k<0 → subdiagonal (below the main diagonal)
dtype	Data type of the output matrix (default: float).


Example:
tri_matrix = np.tri(4, 4, k=0, dtype=int)


14. np.random.rand() - Generate uniform random numbers

Syntax:
np.random.rand(d0, d1, ..., dn)

Generates an array of shape (d0, d1, ..., dn), filled with random values in the range [0, 1).

Example:
rand_array = np.random.rand(2, 3)



 15. np.random.randint() - Generate random integers

Syntax:
np.random.randint(low, high=None, size=None, dtype=int)

Arguments:
low, high: Range (high is optional; defaults to [0, low]).
size: Shape of output array.
dtype: Default is int.

Example:
rand_ints = np.random.randint(1, 10, (3, 3))







16-30 functions

More Commonly Used NumPy Functions (15 Functions)

1. np.reshape() - Change the shape of an array

Syntax:
np.reshape(a, newshape, order='C')

Example:
import numpy as np
arr = np.array([1, 2, 3, 4, 5, 6])
reshaped = np.reshape(arr, (2, 3))



2. np.ravel() - Flatten an array into 1D

Syntax:
np.ravel(a, order='C')

Example:
import numpy as np
flat_array = np.ravel(np.array([[1, 2], [3, 4]]))



3. np.transpose() - Transpose an array

Syntax:
np.transpose(a, axes=None)

Example:
import numpy as np
transposed = np.transpose(np.array([[1, 2], [3, 4]]))



4. np.vstack() - Stack arrays vertically

Syntax:
np.vstack((a, b, ...))

Example:
import numpy as np
a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
stacked = np.vstack((a, b))



5. np.hstack() - Stack arrays horizontally

Syntax:
np.hstack((a, b, ...))

Example:
import numpy as np
a = np.array([[1], [2], [3]])
b = np.array([[4], [5], [6]])
stacked = np.hstack((a, b))



6. np.split() - Split an array into multiple sub-arrays

Syntax:
np.split(ary, indices_or_sections, axis=0)

Example:
import numpy as np
arr = np.array([1, 2, 3, 4, 5, 6])
split_arr = np.split(arr, 3)



7. np.concatenate() - Concatenate multiple arrays

Syntax:
np.concatenate((a1, a2, ...), axis=0)

Example:
import numpy as np
arr1 = np.array([1, 2])
arr2 = np.array([3, 4])
concat_arr = np.concatenate((arr1, arr2))



8. np.unique() - Find unique elements in an array

Syntax:
np.unique(ar, return_index=False, return_inverse=False, return_counts=False)

Example:
import numpy as np
unique_vals = np.unique(np.array([1, 2, 2, 3, 4, 4, 4]))



9. np.sort() - Sort an array

Syntax:
np.sort(a, axis=-1, kind=None, order=None)

Example:
import numpy as np
sorted_arr = np.sort(np.array([3, 1, 2, 5]))



10. np.argsort() - Get indices of sorted elements

Syntax:
np.argsort(a, axis=-1, kind=None, order=None)

Example:
import numpy as np
indices = np.argsort(np.array([3, 1, 2, 5]))



11. np.where() - Get indices where a condition is met

Syntax:
np.where(condition, x=None, y=None)

Example:
import numpy as np
arr = np.array([10, 20, 30, 40])
indices = np.where(arr > 20)



12. np.clip() - Clip values to a given range

Syntax:
np.clip(a, a_min, a_max, out=None)

Example:
import numpy as np
arr = np.array([1, 2, 3, 4, 5])
clipped_arr = np.clip(arr, 2, 4)



13. np.mean() - Compute the mean (average)

Syntax:
np.mean(a, axis=None, dtype=None, out=None)

Example:
import numpy as np
mean_value = np.mean(np.array([1, 2, 3, 4]))



14. np.median() - Compute the median

Syntax:
np.median(a, axis=None, out=None, overwrite_input=False)

Example:
import numpy as np
median_value = np.median(np.array([1, 2, 3, 4, 5]))



15. np.std() - Compute standard deviation

Syntax:
np.std(a, axis=None, dtype=None, out=None, ddof=0)

Example:
import numpy as np
std_dev = np.std(np.array([1, 2, 3, 4]))

.










